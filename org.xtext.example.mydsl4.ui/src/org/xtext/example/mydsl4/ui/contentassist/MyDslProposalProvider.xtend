/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl4.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor.Delegate
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.jface.text.contentassist.CompletionProposal
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import com.google.common.base.Predicate
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.RuleCall
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl4.myDsl.Robot

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class MyDslProposalProvider extends AbstractMyDslProposalProvider {
	
	override completeRobot_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		val bbb = context.copy
		val ggg = bbb.toContext
		val fff = context.firstSetGrammarElements.map[x | x.class]
			val ii = acceptor
		
		completeRuleCall((assignment.getTerminal() as RuleCall), bbb.toContext, acceptor);
		/*lookupCrossReference(model, reffi, acceptor, new Predicate<IEObjectDescription>() {
			
			override apply(IEObjectDescription input) {
				if (input.name.toString.endsWith("hello_world")) false else true
				//throw new UnsupportedOperationException("TODO: auto-generated method stub")
			}		
		}, [x | createCompletionProposal(x.name.toString + "my_assss", context)]) */
		
	}
	
	override completeRobot_Links(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		val ff = model
		val gg = assignment
		val jj = context
		val jjjj = context.matcher
		val bbb = context.copy
		val ppppp = context.prefix
		val lll = context.resource
		val ggg = bbb.toContext
		val ii = acceptor
		
		completeRuleCall((assignment.getTerminal() as RuleCall), ggg, acceptor);
	}
 	
 	override completeRobot_Joint(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
 		val test = model
		
		//completeRuleCall((assignment.getTerminal() as RuleCall), bbb.toContext, acceptor);
 	}
 	
 	override completeRobot_Addto(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
 		
		
		//completeRuleCall((assignment.getTerminal() as RuleCall), bbb.toContext, acceptor);
 	}
 	
 	override completeRobot_Topologies(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
 			
		//completeRuleCall((assignment.getTerminal() as RuleCall), bbb.toContext, acceptor);
 	}
 	
	/*override void completeVisual_Geometry( EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//if (context.lastCompleteNode.grammarElement.equals("Geometry")) {
		val modello = model
		val ass_class = assignment.class
		val ass_cont = assignment.eContainer
		val ass_hhh = assignment.eContainingFeature
		val ctx = context
		val ctx_a = context.lastCompleteNode.class
		val ctx_b = context.currentNode
		val ctx_c = context.firstSetGrammarElements
		val acc = acceptor
		val test = "hello world"
		
		//}
  	 //super.completeVisual_Geometry(model, assignment, context, new MyDLSStringProposalDelegate(acceptor, context))
  	 //acceptor.accept(createCompletionProposal('hello_world', context))
  	 //val test = acceptor
  	
    }*/
   
    static class MyDLSStringProposalDelegate extends Delegate  {
		
		ContentAssistContext ctx
 
        new(ICompletionProposalAcceptor delegate, ContentAssistContext ctx) {
            super(delegate)
            this.ctx = ctx
            
        }
 
        override accept(ICompletionProposal proposal) {
        	if (proposal instanceof ConfigurableCompletionProposal) { 
				val test = proposal.displayString        		
        	}
        	
        	
        	val test = "hello world"
            super.accept(new CompletionProposal(test, ctx.offset, test.length, ctx.offset + test.length))
        }
 
	}
}
