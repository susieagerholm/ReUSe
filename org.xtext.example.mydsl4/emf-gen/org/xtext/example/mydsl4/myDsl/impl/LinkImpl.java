/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl4.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl4.myDsl.Collision;
import org.xtext.example.mydsl4.myDsl.Inertial;
import org.xtext.example.mydsl4.myDsl.Link;
import org.xtext.example.mydsl4.myDsl.MyDslPackage;

import org.xtext.example.mydsl4.myDsl.Reuse;
import org.xtext.example.mydsl4.myDsl.Visual;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl4.myDsl.impl.LinkImpl#getIsReuseOf <em>Is Reuse Of</em>}</li>
 *   <li>{@link org.xtext.example.mydsl4.myDsl.impl.LinkImpl#getReuse <em>Reuse</em>}</li>
 *   <li>{@link org.xtext.example.mydsl4.myDsl.impl.LinkImpl#getInertial <em>Inertial</em>}</li>
 *   <li>{@link org.xtext.example.mydsl4.myDsl.impl.LinkImpl#getVisual <em>Visual</em>}</li>
 *   <li>{@link org.xtext.example.mydsl4.myDsl.impl.LinkImpl#getCollision <em>Collision</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LinkImpl extends ReUseAbleImpl implements Link {
	/**
	 * The cached value of the '{@link #getIsReuseOf() <em>Is Reuse Of</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIsReuseOf()
	 * @generated
	 * @ordered
	 */
	protected Link isReuseOf;

	/**
	 * The cached value of the '{@link #getReuse() <em>Reuse</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReuse()
	 * @generated
	 * @ordered
	 */
	protected Reuse reuse;

	/**
	 * The cached value of the '{@link #getInertial() <em>Inertial</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getInertial()
	 * @generated
	 * @ordered
	 */
	protected Inertial inertial;

	/**
	 * The cached value of the '{@link #getVisual() <em>Visual</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVisual()
	 * @generated
	 * @ordered
	 */
	protected EList<Visual> visual;

	/**
	 * The cached value of the '{@link #getCollision() <em>Collision</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCollision()
	 * @generated
	 * @ordered
	 */
	protected EList<Collision> collision;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MyDslPackage.Literals.LINK;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Link getIsReuseOf() {
		if (isReuseOf != null && isReuseOf.eIsProxy()) {
			InternalEObject oldIsReuseOf = (InternalEObject)isReuseOf;
			isReuseOf = (Link)eResolveProxy(oldIsReuseOf);
			if (isReuseOf != oldIsReuseOf) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.LINK__IS_REUSE_OF, oldIsReuseOf, isReuseOf));
			}
		}
		return isReuseOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Link basicGetIsReuseOf() {
		return isReuseOf;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIsReuseOf(Link newIsReuseOf) {
		Link oldIsReuseOf = isReuseOf;
		isReuseOf = newIsReuseOf;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LINK__IS_REUSE_OF, oldIsReuseOf, isReuseOf));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Reuse getReuse() {
		return reuse;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetReuse(Reuse newReuse, NotificationChain msgs) {
		Reuse oldReuse = reuse;
		reuse = newReuse;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LINK__REUSE, oldReuse, newReuse);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setReuse(Reuse newReuse) {
		if (newReuse != reuse) {
			NotificationChain msgs = null;
			if (reuse != null)
				msgs = ((InternalEObject)reuse).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LINK__REUSE, null, msgs);
			if (newReuse != null)
				msgs = ((InternalEObject)newReuse).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LINK__REUSE, null, msgs);
			msgs = basicSetReuse(newReuse, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LINK__REUSE, newReuse, newReuse));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Inertial getInertial() {
		return inertial;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetInertial(Inertial newInertial, NotificationChain msgs) {
		Inertial oldInertial = inertial;
		inertial = newInertial;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LINK__INERTIAL, oldInertial, newInertial);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInertial(Inertial newInertial) {
		if (newInertial != inertial) {
			NotificationChain msgs = null;
			if (inertial != null)
				msgs = ((InternalEObject)inertial).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LINK__INERTIAL, null, msgs);
			if (newInertial != null)
				msgs = ((InternalEObject)newInertial).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LINK__INERTIAL, null, msgs);
			msgs = basicSetInertial(newInertial, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LINK__INERTIAL, newInertial, newInertial));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Visual> getVisual() {
		if (visual == null) {
			visual = new EObjectContainmentEList<Visual>(Visual.class, this, MyDslPackage.LINK__VISUAL);
		}
		return visual;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Collision> getCollision() {
		if (collision == null) {
			collision = new EObjectContainmentEList<Collision>(Collision.class, this, MyDslPackage.LINK__COLLISION);
		}
		return collision;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MyDslPackage.LINK__REUSE:
				return basicSetReuse(null, msgs);
			case MyDslPackage.LINK__INERTIAL:
				return basicSetInertial(null, msgs);
			case MyDslPackage.LINK__VISUAL:
				return ((InternalEList<?>)getVisual()).basicRemove(otherEnd, msgs);
			case MyDslPackage.LINK__COLLISION:
				return ((InternalEList<?>)getCollision()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MyDslPackage.LINK__IS_REUSE_OF:
				if (resolve) return getIsReuseOf();
				return basicGetIsReuseOf();
			case MyDslPackage.LINK__REUSE:
				return getReuse();
			case MyDslPackage.LINK__INERTIAL:
				return getInertial();
			case MyDslPackage.LINK__VISUAL:
				return getVisual();
			case MyDslPackage.LINK__COLLISION:
				return getCollision();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MyDslPackage.LINK__IS_REUSE_OF:
				setIsReuseOf((Link)newValue);
				return;
			case MyDslPackage.LINK__REUSE:
				setReuse((Reuse)newValue);
				return;
			case MyDslPackage.LINK__INERTIAL:
				setInertial((Inertial)newValue);
				return;
			case MyDslPackage.LINK__VISUAL:
				getVisual().clear();
				getVisual().addAll((Collection<? extends Visual>)newValue);
				return;
			case MyDslPackage.LINK__COLLISION:
				getCollision().clear();
				getCollision().addAll((Collection<? extends Collision>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MyDslPackage.LINK__IS_REUSE_OF:
				setIsReuseOf((Link)null);
				return;
			case MyDslPackage.LINK__REUSE:
				setReuse((Reuse)null);
				return;
			case MyDslPackage.LINK__INERTIAL:
				setInertial((Inertial)null);
				return;
			case MyDslPackage.LINK__VISUAL:
				getVisual().clear();
				return;
			case MyDslPackage.LINK__COLLISION:
				getCollision().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MyDslPackage.LINK__IS_REUSE_OF:
				return isReuseOf != null;
			case MyDslPackage.LINK__REUSE:
				return reuse != null;
			case MyDslPackage.LINK__INERTIAL:
				return inertial != null;
			case MyDslPackage.LINK__VISUAL:
				return visual != null && !visual.isEmpty();
			case MyDslPackage.LINK__COLLISION:
				return collision != null && !collision.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //LinkImpl
