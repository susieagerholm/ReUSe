/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl4.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLinksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinksLinkParserRuleCall_2_0 = (RuleCall)cLinksAssignment_2.eContents().get(0);
		
		//Robot:
		//	'Robot' name=ID
		//	links+=Link*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID links+=Link*
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//links+=Link*
		public Assignment getLinksAssignment_2() { return cLinksAssignment_2; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_2_0() { return cLinksLinkParserRuleCall_2_0; }
	}
	public class ReUseAbleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.ReUseAble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVisualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInertialParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInertiaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ReUseAble:
		//	Link | Visual | Inertial | Inertia;
		@Override public ParserRule getRule() { return rule; }
		
		//Link | Visual | Inertial | Inertia
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Link
		public RuleCall getLinkParserRuleCall_0() { return cLinkParserRuleCall_0; }
		
		//Visual
		public RuleCall getVisualParserRuleCall_1() { return cVisualParserRuleCall_1; }
		
		//Inertial
		public RuleCall getInertialParserRuleCall_2() { return cInertialParserRuleCall_2; }
		
		//Inertia
		public RuleCall getInertiaParserRuleCall_3() { return cInertiaParserRuleCall_3; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cDefKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cInertialAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cInertialInertialParserRuleCall_3_0_1_0_0 = (RuleCall)cInertialAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cVisualAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cVisualVisualParserRuleCall_3_0_1_1_0 = (RuleCall)cVisualAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cCollisionAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cCollisionCollisionParserRuleCall_3_0_1_2_0 = (RuleCall)cCollisionAssignment_3_0_1_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cReuseKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLinkAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cLinkLinkCrossReference_3_1_1_0 = (CrossReference)cLinkAssignment_3_1_1.eContents().get(0);
		private final RuleCall cLinkLinkIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cLinkLinkCrossReference_3_1_1_0.eContents().get(1);
		private final Assignment cReuseAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cReuseReuseParserRuleCall_3_1_2_0 = (RuleCall)cReuseAssignment_3_1_2.eContents().get(0);
		
		//Link:
		//	{Link} 'Link' name=ID ('def' (inertial=Inertial | visual+=Visual | collision+=Collision)* | 'reuse' link=[Link]
		//	reuse=Reuse)?
		//	//('def' inertial=Inertial | visual+=Visual*)?  
		//	//('reuse' link=[Link] reuse=Reuse)?
		//	// ('def' decorator+=ReUseAble* | 'reuse' link=[Link] test=Test)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Link} 'Link' name=ID ('def' (inertial=Inertial | visual+=Visual | collision+=Collision)* | 'reuse' link=[Link]
		//reuse=Reuse)?
		public Group getGroup() { return cGroup; }
		
		//{Link}
		public Action getLinkAction_0() { return cLinkAction_0; }
		
		//'Link'
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('def' (inertial=Inertial | visual+=Visual | collision+=Collision)* | 'reuse' link=[Link] reuse=Reuse)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'def' (inertial=Inertial | visual+=Visual | collision+=Collision)*
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'def'
		public Keyword getDefKeyword_3_0_0() { return cDefKeyword_3_0_0; }
		
		//(inertial=Inertial | visual+=Visual | collision+=Collision)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//inertial=Inertial
		public Assignment getInertialAssignment_3_0_1_0() { return cInertialAssignment_3_0_1_0; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_3_0_1_0_0() { return cInertialInertialParserRuleCall_3_0_1_0_0; }
		
		//visual+=Visual
		public Assignment getVisualAssignment_3_0_1_1() { return cVisualAssignment_3_0_1_1; }
		
		//Visual
		public RuleCall getVisualVisualParserRuleCall_3_0_1_1_0() { return cVisualVisualParserRuleCall_3_0_1_1_0; }
		
		//collision+=Collision
		public Assignment getCollisionAssignment_3_0_1_2() { return cCollisionAssignment_3_0_1_2; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_3_0_1_2_0() { return cCollisionCollisionParserRuleCall_3_0_1_2_0; }
		
		//'reuse' link=[Link] reuse=Reuse
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'reuse'
		public Keyword getReuseKeyword_3_1_0() { return cReuseKeyword_3_1_0; }
		
		//link=[Link]
		public Assignment getLinkAssignment_3_1_1() { return cLinkAssignment_3_1_1; }
		
		//[Link]
		public CrossReference getLinkLinkCrossReference_3_1_1_0() { return cLinkLinkCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getLinkLinkIDTerminalRuleCall_3_1_1_0_1() { return cLinkLinkIDTerminalRuleCall_3_1_1_0_1; }
		
		//reuse=Reuse
		public Assignment getReuseAssignment_3_1_2() { return cReuseAssignment_3_1_2; }
		
		//Reuse
		public RuleCall getReuseReuseParserRuleCall_3_1_2_0() { return cReuseReuseParserRuleCall_3_1_2_0; }
	}
	public class ReuseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Reuse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReuseAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cEditKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRefDotExpressionParserRuleCall_1_0_1_0 = (RuleCall)cRefAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAddKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAddAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAddReUseAbleParserRuleCall_1_1_1_0 = (RuleCall)cAddAssignment_1_1_1.eContents().get(0);
		
		//Reuse:
		//	{Reuse} ('edit' ref=DotExpression | 'add' add=ReUseAble)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Reuse} ('edit' ref=DotExpression | 'add' add=ReUseAble)?
		public Group getGroup() { return cGroup; }
		
		//{Reuse}
		public Action getReuseAction_0() { return cReuseAction_0; }
		
		//('edit' ref=DotExpression | 'add' add=ReUseAble)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'edit' ref=DotExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'edit'
		public Keyword getEditKeyword_1_0_0() { return cEditKeyword_1_0_0; }
		
		//ref=DotExpression
		public Assignment getRefAssignment_1_0_1() { return cRefAssignment_1_0_1; }
		
		//DotExpression
		public RuleCall getRefDotExpressionParserRuleCall_1_0_1_0() { return cRefDotExpressionParserRuleCall_1_0_1_0; }
		
		//'add' add=ReUseAble
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'add'
		public Keyword getAddKeyword_1_1_0() { return cAddKeyword_1_1_0; }
		
		//add=ReUseAble
		public Assignment getAddAssignment_1_1_1() { return cAddAssignment_1_1_1; }
		
		//ReUseAble
		public RuleCall getAddReUseAbleParserRuleCall_1_1_1_0() { return cAddReUseAbleParserRuleCall_1_1_1_0; }
	}
	public class DotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.DotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReUsableRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDotExpressionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTailReUseAbleCrossReference_1_2_0 = (CrossReference)cTailAssignment_1_2.eContents().get(0);
		private final RuleCall cTailReUseAbleIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTailReUseAbleCrossReference_1_2_0.eContents().get(1);
		
		//DotExpression Ref:
		//	ReUsableRef ({DotExpression.ref=current} "." tail=[ReUseAble])*
		@Override public ParserRule getRule() { return rule; }
		
		//ReUsableRef ({DotExpression.ref=current} "." tail=[ReUseAble])*
		public Group getGroup() { return cGroup; }
		
		//ReUsableRef
		public RuleCall getReUsableRefParserRuleCall_0() { return cReUsableRefParserRuleCall_0; }
		
		//({DotExpression.ref=current} "." tail=[ReUseAble])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{DotExpression.ref=current}
		public Action getDotExpressionRefAction_1_0() { return cDotExpressionRefAction_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//tail=[ReUseAble]
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }
		
		//[ReUseAble]
		public CrossReference getTailReUseAbleCrossReference_1_2_0() { return cTailReUseAbleCrossReference_1_2_0; }
		
		//ID
		public RuleCall getTailReUseAbleIDTerminalRuleCall_1_2_0_1() { return cTailReUseAbleIDTerminalRuleCall_1_2_0_1; }
	}
	public class ReUsableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.ReUsableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReUsableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReuseableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReuseableReUseAbleCrossReference_1_0 = (CrossReference)cReuseableAssignment_1.eContents().get(0);
		private final RuleCall cReuseableReUseAbleIDTerminalRuleCall_1_0_1 = (RuleCall)cReuseableReUseAbleCrossReference_1_0.eContents().get(1);
		
		//ReUsableRef Ref:
		//	{ReUsableRef} reuseable=[ReUseAble]
		@Override public ParserRule getRule() { return rule; }
		
		//{ReUsableRef} reuseable=[ReUseAble]
		public Group getGroup() { return cGroup; }
		
		//{ReUsableRef}
		public Action getReUsableRefAction_0() { return cReUsableRefAction_0; }
		
		//reuseable=[ReUseAble]
		public Assignment getReuseableAssignment_1() { return cReuseableAssignment_1; }
		
		//[ReUseAble]
		public CrossReference getReuseableReUseAbleCrossReference_1_0() { return cReuseableReUseAbleCrossReference_1_0; }
		
		//ID
		public RuleCall getReuseableReUseAbleIDTerminalRuleCall_1_0_1() { return cReuseableReUseAbleIDTerminalRuleCall_1_0_1; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertialAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInertiaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInertiaInertiaParserRuleCall_3_0 = (RuleCall)cInertiaAssignment_3.eContents().get(0);
		private final Assignment cMassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMassMassParserRuleCall_4_0 = (RuleCall)cMassAssignment_4.eContents().get(0);
		private final Assignment cOriginAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOriginOriginParserRuleCall_5_0 = (RuleCall)cOriginAssignment_5.eContents().get(0);
		
		/// *LinkDecorator returns ReUseAble:
		//	Inertial | Visual | Inertia | Mass   
		//;* / Inertial:
		//	{Inertial} 'Inertial' name=ID?
		//	inertia=Inertia
		//	mass=Mass
		//	origin=Origin?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertial} 'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//{Inertial}
		public Action getInertialAction_0() { return cInertialAction_0; }
		
		//'Inertial'
		public Keyword getInertialKeyword_1() { return cInertialKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_3() { return cInertiaAssignment_3; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_3_0() { return cInertiaInertiaParserRuleCall_3_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_4() { return cMassAssignment_4; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_4_0() { return cMassMassParserRuleCall_4_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_5() { return cOriginAssignment_5; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_5_0() { return cOriginOriginParserRuleCall_5_0; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIxxKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIxxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIxxURDFAttrSignedNumericParserRuleCall_4_0 = (RuleCall)cIxxAssignment_4.eContents().get(0);
		private final Keyword cIxyKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIxyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIxyURDFAttrSignedNumericParserRuleCall_6_0 = (RuleCall)cIxyAssignment_6.eContents().get(0);
		private final Keyword cIxzKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIxzAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIxzURDFAttrSignedNumericParserRuleCall_8_0 = (RuleCall)cIxzAssignment_8.eContents().get(0);
		private final Keyword cIyyKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cIyyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cIyyURDFAttrSignedNumericParserRuleCall_10_0 = (RuleCall)cIyyAssignment_10.eContents().get(0);
		private final Keyword cIyzKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cIyzAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cIyzURDFAttrSignedNumericParserRuleCall_12_0 = (RuleCall)cIyzAssignment_12.eContents().get(0);
		private final Keyword cIzzKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cIzzAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cIzzURDFAttrSignedNumericParserRuleCall_14_0 = (RuleCall)cIzzAssignment_14.eContents().get(0);
		
		//Inertia:
		//	{Inertia} 'Inertia' name=ID?
		//	'ixx' ixx=URDFAttrSignedNumeric
		//	'ixy' ixy=URDFAttrSignedNumeric
		//	'ixz' ixz=URDFAttrSignedNumeric
		//	'iyy' iyy=URDFAttrSignedNumeric
		//	'iyz' iyz=URDFAttrSignedNumeric
		//	'izz' izz=URDFAttrSignedNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertia} 'Inertia' name=ID? 'ixx' ixx=URDFAttrSignedNumeric 'ixy' ixy=URDFAttrSignedNumeric 'ixz'
		//ixz=URDFAttrSignedNumeric 'iyy' iyy=URDFAttrSignedNumeric 'iyz' iyz=URDFAttrSignedNumeric 'izz'
		//izz=URDFAttrSignedNumeric
		public Group getGroup() { return cGroup; }
		
		//{Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_1() { return cInertiaKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'ixx'
		public Keyword getIxxKeyword_3() { return cIxxKeyword_3; }
		
		//ixx=URDFAttrSignedNumeric
		public Assignment getIxxAssignment_4() { return cIxxAssignment_4; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIxxURDFAttrSignedNumericParserRuleCall_4_0() { return cIxxURDFAttrSignedNumericParserRuleCall_4_0; }
		
		//'ixy'
		public Keyword getIxyKeyword_5() { return cIxyKeyword_5; }
		
		//ixy=URDFAttrSignedNumeric
		public Assignment getIxyAssignment_6() { return cIxyAssignment_6; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIxyURDFAttrSignedNumericParserRuleCall_6_0() { return cIxyURDFAttrSignedNumericParserRuleCall_6_0; }
		
		//'ixz'
		public Keyword getIxzKeyword_7() { return cIxzKeyword_7; }
		
		//ixz=URDFAttrSignedNumeric
		public Assignment getIxzAssignment_8() { return cIxzAssignment_8; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIxzURDFAttrSignedNumericParserRuleCall_8_0() { return cIxzURDFAttrSignedNumericParserRuleCall_8_0; }
		
		//'iyy'
		public Keyword getIyyKeyword_9() { return cIyyKeyword_9; }
		
		//iyy=URDFAttrSignedNumeric
		public Assignment getIyyAssignment_10() { return cIyyAssignment_10; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIyyURDFAttrSignedNumericParserRuleCall_10_0() { return cIyyURDFAttrSignedNumericParserRuleCall_10_0; }
		
		//'iyz'
		public Keyword getIyzKeyword_11() { return cIyzKeyword_11; }
		
		//iyz=URDFAttrSignedNumeric
		public Assignment getIyzAssignment_12() { return cIyzAssignment_12; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIyzURDFAttrSignedNumericParserRuleCall_12_0() { return cIyzURDFAttrSignedNumericParserRuleCall_12_0; }
		
		//'izz'
		public Keyword getIzzKeyword_13() { return cIzzKeyword_13; }
		
		//izz=URDFAttrSignedNumeric
		public Assignment getIzzAssignment_14() { return cIzzAssignment_14; }
		
		//URDFAttrSignedNumeric
		public RuleCall getIzzURDFAttrSignedNumericParserRuleCall_14_0() { return cIzzURDFAttrSignedNumericParserRuleCall_14_0; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVisualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVisualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		private final Assignment cOriginAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOriginOriginParserRuleCall_5_0 = (RuleCall)cOriginAssignment_5.eContents().get(0);
		
		//Visual:
		//	{Visual} 'Visual' name=ID?
		//	'Geometry' geometry+=Geometry*
		//	origin=Origin?
		//	//'Material' (material=Material)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Visual} 'Visual' name=ID? 'Geometry' geometry+=Geometry* origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//{Visual}
		public Action getVisualAction_0() { return cVisualAction_0; }
		
		//'Visual'
		public Keyword getVisualKeyword_1() { return cVisualKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry+=Geometry*
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_5() { return cOriginAssignment_5; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_5_0() { return cOriginOriginParserRuleCall_5_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOriginAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOriginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXURDFAttrSignedNumericParserRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYURDFAttrSignedNumericParserRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cZKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cZAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cZURDFAttrSignedNumericParserRuleCall_8_0 = (RuleCall)cZAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRollKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cRollAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cRollURDFAttrSignedNumericParserRuleCall_9_1_0 = (RuleCall)cRollAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cPitchKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cPitchAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPitchURDFAttrSignedNumericParserRuleCall_10_1_0 = (RuleCall)cPitchAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cYawKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cYawAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cYawURDFAttrSignedNumericParserRuleCall_11_1_0 = (RuleCall)cYawAssignment_11_1.eContents().get(0);
		
		//Origin:
		//	{Origin} 'Origin' name=ID?
		//	'x' x=URDFAttrSignedNumeric
		//	'y' y=URDFAttrSignedNumeric
		//	'z' z=URDFAttrSignedNumeric ('roll' roll=URDFAttrSignedNumeric)? ('pitch' pitch=URDFAttrSignedNumeric)? ('yaw'
		//	yaw=URDFAttrSignedNumeric)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Origin} 'Origin' name=ID? 'x' x=URDFAttrSignedNumeric 'y' y=URDFAttrSignedNumeric 'z' z=URDFAttrSignedNumeric ('roll'
		//roll=URDFAttrSignedNumeric)? ('pitch' pitch=URDFAttrSignedNumeric)? ('yaw' yaw=URDFAttrSignedNumeric)?
		public Group getGroup() { return cGroup; }
		
		//{Origin}
		public Action getOriginAction_0() { return cOriginAction_0; }
		
		//'Origin'
		public Keyword getOriginKeyword_1() { return cOriginKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'x'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//x=URDFAttrSignedNumeric
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//URDFAttrSignedNumeric
		public RuleCall getXURDFAttrSignedNumericParserRuleCall_4_0() { return cXURDFAttrSignedNumericParserRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//y=URDFAttrSignedNumeric
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//URDFAttrSignedNumeric
		public RuleCall getYURDFAttrSignedNumericParserRuleCall_6_0() { return cYURDFAttrSignedNumericParserRuleCall_6_0; }
		
		//'z'
		public Keyword getZKeyword_7() { return cZKeyword_7; }
		
		//z=URDFAttrSignedNumeric
		public Assignment getZAssignment_8() { return cZAssignment_8; }
		
		//URDFAttrSignedNumeric
		public RuleCall getZURDFAttrSignedNumericParserRuleCall_8_0() { return cZURDFAttrSignedNumericParserRuleCall_8_0; }
		
		//('roll' roll=URDFAttrSignedNumeric)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'roll'
		public Keyword getRollKeyword_9_0() { return cRollKeyword_9_0; }
		
		//roll=URDFAttrSignedNumeric
		public Assignment getRollAssignment_9_1() { return cRollAssignment_9_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getRollURDFAttrSignedNumericParserRuleCall_9_1_0() { return cRollURDFAttrSignedNumericParserRuleCall_9_1_0; }
		
		//('pitch' pitch=URDFAttrSignedNumeric)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'pitch'
		public Keyword getPitchKeyword_10_0() { return cPitchKeyword_10_0; }
		
		//pitch=URDFAttrSignedNumeric
		public Assignment getPitchAssignment_10_1() { return cPitchAssignment_10_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getPitchURDFAttrSignedNumericParserRuleCall_10_1_0() { return cPitchURDFAttrSignedNumericParserRuleCall_10_1_0; }
		
		//('yaw' yaw=URDFAttrSignedNumeric)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'yaw'
		public Keyword getYawKeyword_11_0() { return cYawKeyword_11_0; }
		
		//yaw=URDFAttrSignedNumeric
		public Assignment getYawAssignment_11_1() { return cYawAssignment_11_1; }
		
		//URDFAttrSignedNumeric
		public RuleCall getYawURDFAttrSignedNumericParserRuleCall_11_1_0() { return cYawURDFAttrSignedNumericParserRuleCall_11_1_0; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cMassKilogramKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMassKilogramAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMassKilogramURDFAttrSignedNumericParserRuleCall_4_0 = (RuleCall)cMassKilogramAssignment_4.eContents().get(0);
		
		//Mass:
		//	{Mass} 'Mass' name=ID?
		//	'massKilogram' massKilogram=URDFAttrSignedNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//{Mass} 'Mass' name=ID? 'massKilogram' massKilogram=URDFAttrSignedNumeric
		public Group getGroup() { return cGroup; }
		
		//{Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'Mass'
		public Keyword getMassKeyword_1() { return cMassKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'massKilogram'
		public Keyword getMassKilogramKeyword_3() { return cMassKilogramKeyword_3; }
		
		//massKilogram=URDFAttrSignedNumeric
		public Assignment getMassKilogramAssignment_4() { return cMassKilogramAssignment_4; }
		
		//URDFAttrSignedNumeric
		public RuleCall getMassKilogramURDFAttrSignedNumericParserRuleCall_4_0() { return cMassKilogramURDFAttrSignedNumericParserRuleCall_4_0; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGeometryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeometryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeometryGeometryParserRuleCall_3_0 = (RuleCall)cGeometryAssignment_3.eContents().get(0);
		private final Assignment cOriginAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOriginOriginParserRuleCall_4_0 = (RuleCall)cOriginAssignment_4.eContents().get(0);
		
		//Collision:
		//	'Collision' name=ID
		//	'Geometry' geometry+=Geometry*
		//	origin=Origin?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Collision' name=ID 'Geometry' geometry+=Geometry* origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//'Collision'
		public Keyword getCollisionKeyword_0() { return cCollisionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_2() { return cGeometryKeyword_2; }
		
		//geometry+=Geometry*
		public Assignment getGeometryAssignment_3() { return cGeometryAssignment_3; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_3_0() { return cGeometryGeometryParserRuleCall_3_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_4() { return cOriginAssignment_4; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_4_0() { return cOriginOriginParserRuleCall_4_0; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Geometry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCylinderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeshParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSphereParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Geometry:
		//	Box | Cylinder | Mesh | Sphere;
		@Override public ParserRule getRule() { return rule; }
		
		//Box | Cylinder | Mesh | Sphere
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Box
		public RuleCall getBoxParserRuleCall_0() { return cBoxParserRuleCall_0; }
		
		//Cylinder
		public RuleCall getCylinderParserRuleCall_1() { return cCylinderParserRuleCall_1; }
		
		//Mesh
		public RuleCall getMeshParserRuleCall_2() { return cMeshParserRuleCall_2; }
		
		//Sphere
		public RuleCall getSphereParserRuleCall_3() { return cSphereParserRuleCall_3; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHeightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightURDFAttrNumericParserRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLengthURDFAttrNumericParserRuleCall_5_0 = (RuleCall)cLengthAssignment_5.eContents().get(0);
		private final Keyword cWidthKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWidthAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWidthURDFAttrNumericParserRuleCall_7_0 = (RuleCall)cWidthAssignment_7.eContents().get(0);
		
		////Tjek spec: order listing of dimensions?
		//Box:
		//	'Box' name=ID?
		//	'height' height=URDFAttrNumeric
		//	'length' length=URDFAttrNumeric
		//	'width' width=URDFAttrNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//'Box' name=ID? 'height' height=URDFAttrNumeric 'length' length=URDFAttrNumeric 'width' width=URDFAttrNumeric
		public Group getGroup() { return cGroup; }
		
		//'Box'
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'height'
		public Keyword getHeightKeyword_2() { return cHeightKeyword_2; }
		
		//height=URDFAttrNumeric
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }
		
		//URDFAttrNumeric
		public RuleCall getHeightURDFAttrNumericParserRuleCall_3_0() { return cHeightURDFAttrNumericParserRuleCall_3_0; }
		
		//'length'
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }
		
		//length=URDFAttrNumeric
		public Assignment getLengthAssignment_5() { return cLengthAssignment_5; }
		
		//URDFAttrNumeric
		public RuleCall getLengthURDFAttrNumericParserRuleCall_5_0() { return cLengthURDFAttrNumericParserRuleCall_5_0; }
		
		//'width'
		public Keyword getWidthKeyword_6() { return cWidthKeyword_6; }
		
		//width=URDFAttrNumeric
		public Assignment getWidthAssignment_7() { return cWidthAssignment_7; }
		
		//URDFAttrNumeric
		public RuleCall getWidthURDFAttrNumericParserRuleCall_7_0() { return cWidthURDFAttrNumericParserRuleCall_7_0; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusURDFAttrNumericParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLengthURDFAttrNumericParserRuleCall_5_0 = (RuleCall)cLengthAssignment_5.eContents().get(0);
		
		//Cylinder:
		//	'Cylinder' name=ID?
		//	'radius' radius=URDFAttrNumeric
		//	'length' length=URDFAttrNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cylinder' name=ID? 'radius' radius=URDFAttrNumeric 'length' length=URDFAttrNumeric
		public Group getGroup() { return cGroup; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_0() { return cCylinderKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=URDFAttrNumeric
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//URDFAttrNumeric
		public RuleCall getRadiusURDFAttrNumericParserRuleCall_3_0() { return cRadiusURDFAttrNumericParserRuleCall_3_0; }
		
		//'length'
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }
		
		//length=URDFAttrNumeric
		public Assignment getLengthAssignment_5() { return cLengthAssignment_5; }
		
		//URDFAttrNumeric
		public RuleCall getLengthURDFAttrNumericParserRuleCall_5_0() { return cLengthURDFAttrNumericParserRuleCall_5_0; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeshKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPathToFileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathToFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathToFileURDFAttrSTRINGParserRuleCall_3_0 = (RuleCall)cPathToFileAssignment_3.eContents().get(0);
		
		////TODO: create ValueConverter to convert scale to Box
		//Mesh:
		//	'Mesh' name=ID?
		//	'pathToFile' pathToFile=URDFAttrSTRING
		//	//('scale' dimension=Box)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mesh' name=ID? 'pathToFile' pathToFile=URDFAttrSTRING
		public Group getGroup() { return cGroup; }
		
		//'Mesh'
		public Keyword getMeshKeyword_0() { return cMeshKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'pathToFile'
		public Keyword getPathToFileKeyword_2() { return cPathToFileKeyword_2; }
		
		//pathToFile=URDFAttrSTRING
		public Assignment getPathToFileAssignment_3() { return cPathToFileAssignment_3; }
		
		//URDFAttrSTRING
		public RuleCall getPathToFileURDFAttrSTRINGParserRuleCall_3_0() { return cPathToFileURDFAttrSTRINGParserRuleCall_3_0; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusURDFAttrNumericParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		
		//Sphere:
		//	'Sphere' name=ID?
		//	'radius' radius=URDFAttrNumeric;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sphere' name=ID? 'radius' radius=URDFAttrNumeric
		public Group getGroup() { return cGroup; }
		
		//'Sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=URDFAttrNumeric
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//URDFAttrNumeric
		public RuleCall getRadiusURDFAttrNumericParserRuleCall_3_0() { return cRadiusURDFAttrNumericParserRuleCall_3_0; }
	}
	public class URDFAttrSignedNumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.URDFAttrSignedNumeric");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSIGNED_NUMERICParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// *Material:
		//	Texture //| Color 
		//;
		//
		//
		//Texture:
		//	'Texture' (name=ID)?
		//	'pathToFile' pathToFile=URDFAttrSTRING
		//;
		//
		// RGBA values must be floats between 0 and 1 incl 
		//Color:
		//	'Color' (name=ID)?
		//	'red' red=URDFAttrFloat 
		//	'green' green=URDFAttrFloat 
		//	'blue' blue=URDFAttrFloat 
		//	'alpha' alpha=URDFAttrFloat	
		//;
		// * / URDFAttrSignedNumeric:
		//	value=SIGNED_NUMERIC;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SIGNED_NUMERIC
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SIGNED_NUMERIC
		public RuleCall getValueSIGNED_NUMERICParserRuleCall_0() { return cValueSIGNED_NUMERICParserRuleCall_0; }
	}
	public class URDFAttrFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.URDFAttrFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrFloat:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_0() { return cValueFLOATParserRuleCall_0; }
	}
	public class URDFAttrINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.URDFAttrINT");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrINT:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class URDFAttrNumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.URDFAttrNumeric");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMERICParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrNumeric:
		//	value=NUMERIC;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NUMERIC
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NUMERIC
		public RuleCall getValueNUMERICParserRuleCall_0() { return cValueNUMERICParserRuleCall_0; }
	}
	public class URDFAttrSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.URDFAttrSTRING");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//URDFAttrSTRING:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT ecore::EFloat:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SCIENTIFICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.SCIENTIFIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SCIENTIFIC ecore::EBigDecimal:
		//	FLOAT 'e' ('+' | '-')? INT
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT 'e' ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_0() { return cFLOATParserRuleCall_0; }
		
		//'e'
		public Keyword getEKeyword_1() { return cEKeyword_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class SIGNED_NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.SIGNED_NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSCIENTIFICParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//SIGNED_NUMERIC:
		//	'-'? (INT | FLOAT | SCIENTIFIC);
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? (INT | FLOAT | SCIENTIFIC)
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(INT | FLOAT | SCIENTIFIC)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1_1() { return cFLOATParserRuleCall_1_1; }
		
		//SCIENTIFIC
		public RuleCall getSCIENTIFICParserRuleCall_1_2() { return cSCIENTIFICParserRuleCall_1_2; }
	}
	public class NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.NUMERIC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSCIENTIFICParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NUMERIC:
		//	INT | FLOAT | SCIENTIFIC;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | FLOAT | SCIENTIFIC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }
		
		//SCIENTIFIC
		public RuleCall getSCIENTIFICParserRuleCall_2() { return cSCIENTIFICParserRuleCall_2; }
	}
	
	
	private final RobotElements pRobot;
	private final ReUseAbleElements pReUseAble;
	private final LinkElements pLink;
	private final ReuseElements pReuse;
	private final DotExpressionElements pDotExpression;
	private final ReUsableRefElements pReUsableRef;
	private final InertialElements pInertial;
	private final InertiaElements pInertia;
	private final VisualElements pVisual;
	private final OriginElements pOrigin;
	private final MassElements pMass;
	private final CollisionElements pCollision;
	private final GeometryElements pGeometry;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final MeshElements pMesh;
	private final SphereElements pSphere;
	private final URDFAttrSignedNumericElements pURDFAttrSignedNumeric;
	private final URDFAttrFloatElements pURDFAttrFloat;
	private final URDFAttrINTElements pURDFAttrINT;
	private final URDFAttrNumericElements pURDFAttrNumeric;
	private final URDFAttrSTRINGElements pURDFAttrSTRING;
	private final FLOATElements pFLOAT;
	private final SCIENTIFICElements pSCIENTIFIC;
	private final SIGNED_NUMERICElements pSIGNED_NUMERIC;
	private final NUMERICElements pNUMERIC;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pReUseAble = new ReUseAbleElements();
		this.pLink = new LinkElements();
		this.pReuse = new ReuseElements();
		this.pDotExpression = new DotExpressionElements();
		this.pReUsableRef = new ReUsableRefElements();
		this.pInertial = new InertialElements();
		this.pInertia = new InertiaElements();
		this.pVisual = new VisualElements();
		this.pOrigin = new OriginElements();
		this.pMass = new MassElements();
		this.pCollision = new CollisionElements();
		this.pGeometry = new GeometryElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pMesh = new MeshElements();
		this.pSphere = new SphereElements();
		this.pURDFAttrSignedNumeric = new URDFAttrSignedNumericElements();
		this.pURDFAttrFloat = new URDFAttrFloatElements();
		this.pURDFAttrINT = new URDFAttrINTElements();
		this.pURDFAttrNumeric = new URDFAttrNumericElements();
		this.pURDFAttrSTRING = new URDFAttrSTRINGElements();
		this.pFLOAT = new FLOATElements();
		this.pSCIENTIFIC = new SCIENTIFICElements();
		this.pSIGNED_NUMERIC = new SIGNED_NUMERICElements();
		this.pNUMERIC = new NUMERICElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl4.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	'Robot' name=ID
	//	links+=Link*;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//ReUseAble:
	//	Link | Visual | Inertial | Inertia;
	public ReUseAbleElements getReUseAbleAccess() {
		return pReUseAble;
	}
	
	public ParserRule getReUseAbleRule() {
		return getReUseAbleAccess().getRule();
	}
	
	//Link:
	//	{Link} 'Link' name=ID ('def' (inertial=Inertial | visual+=Visual | collision+=Collision)* | 'reuse' link=[Link]
	//	reuse=Reuse)?
	//	//('def' inertial=Inertial | visual+=Visual*)?  
	//	//('reuse' link=[Link] reuse=Reuse)?
	//	// ('def' decorator+=ReUseAble* | 'reuse' link=[Link] test=Test)?
	//;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Reuse:
	//	{Reuse} ('edit' ref=DotExpression | 'add' add=ReUseAble)?;
	public ReuseElements getReuseAccess() {
		return pReuse;
	}
	
	public ParserRule getReuseRule() {
		return getReuseAccess().getRule();
	}
	
	//DotExpression Ref:
	//	ReUsableRef ({DotExpression.ref=current} "." tail=[ReUseAble])*
	public DotExpressionElements getDotExpressionAccess() {
		return pDotExpression;
	}
	
	public ParserRule getDotExpressionRule() {
		return getDotExpressionAccess().getRule();
	}
	
	//ReUsableRef Ref:
	//	{ReUsableRef} reuseable=[ReUseAble]
	public ReUsableRefElements getReUsableRefAccess() {
		return pReUsableRef;
	}
	
	public ParserRule getReUsableRefRule() {
		return getReUsableRefAccess().getRule();
	}
	
	/// *LinkDecorator returns ReUseAble:
	//	Inertial | Visual | Inertia | Mass   
	//;* / Inertial:
	//	{Inertial} 'Inertial' name=ID?
	//	inertia=Inertia
	//	mass=Mass
	//	origin=Origin?;
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Inertia:
	//	{Inertia} 'Inertia' name=ID?
	//	'ixx' ixx=URDFAttrSignedNumeric
	//	'ixy' ixy=URDFAttrSignedNumeric
	//	'ixz' ixz=URDFAttrSignedNumeric
	//	'iyy' iyy=URDFAttrSignedNumeric
	//	'iyz' iyz=URDFAttrSignedNumeric
	//	'izz' izz=URDFAttrSignedNumeric;
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Visual:
	//	{Visual} 'Visual' name=ID?
	//	'Geometry' geometry+=Geometry*
	//	origin=Origin?
	//	//'Material' (material=Material)?
	//;
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Origin:
	//	{Origin} 'Origin' name=ID?
	//	'x' x=URDFAttrSignedNumeric
	//	'y' y=URDFAttrSignedNumeric
	//	'z' z=URDFAttrSignedNumeric ('roll' roll=URDFAttrSignedNumeric)? ('pitch' pitch=URDFAttrSignedNumeric)? ('yaw'
	//	yaw=URDFAttrSignedNumeric)?;
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Mass:
	//	{Mass} 'Mass' name=ID?
	//	'massKilogram' massKilogram=URDFAttrSignedNumeric;
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Collision:
	//	'Collision' name=ID
	//	'Geometry' geometry+=Geometry*
	//	origin=Origin?;
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Geometry:
	//	Box | Cylinder | Mesh | Sphere;
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	////Tjek spec: order listing of dimensions?
	//Box:
	//	'Box' name=ID?
	//	'height' height=URDFAttrNumeric
	//	'length' length=URDFAttrNumeric
	//	'width' width=URDFAttrNumeric;
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder:
	//	'Cylinder' name=ID?
	//	'radius' radius=URDFAttrNumeric
	//	'length' length=URDFAttrNumeric;
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	////TODO: create ValueConverter to convert scale to Box
	//Mesh:
	//	'Mesh' name=ID?
	//	'pathToFile' pathToFile=URDFAttrSTRING
	//	//('scale' dimension=Box)?
	//;
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//Sphere:
	//	'Sphere' name=ID?
	//	'radius' radius=URDFAttrNumeric;
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	/// *Material:
	//	Texture //| Color 
	//;
	//
	//
	//Texture:
	//	'Texture' (name=ID)?
	//	'pathToFile' pathToFile=URDFAttrSTRING
	//;
	//
	// RGBA values must be floats between 0 and 1 incl 
	//Color:
	//	'Color' (name=ID)?
	//	'red' red=URDFAttrFloat 
	//	'green' green=URDFAttrFloat 
	//	'blue' blue=URDFAttrFloat 
	//	'alpha' alpha=URDFAttrFloat	
	//;
	// * / URDFAttrSignedNumeric:
	//	value=SIGNED_NUMERIC;
	public URDFAttrSignedNumericElements getURDFAttrSignedNumericAccess() {
		return pURDFAttrSignedNumeric;
	}
	
	public ParserRule getURDFAttrSignedNumericRule() {
		return getURDFAttrSignedNumericAccess().getRule();
	}
	
	//URDFAttrFloat:
	//	value=FLOAT;
	public URDFAttrFloatElements getURDFAttrFloatAccess() {
		return pURDFAttrFloat;
	}
	
	public ParserRule getURDFAttrFloatRule() {
		return getURDFAttrFloatAccess().getRule();
	}
	
	//URDFAttrINT:
	//	value=INT;
	public URDFAttrINTElements getURDFAttrINTAccess() {
		return pURDFAttrINT;
	}
	
	public ParserRule getURDFAttrINTRule() {
		return getURDFAttrINTAccess().getRule();
	}
	
	//URDFAttrNumeric:
	//	value=NUMERIC;
	public URDFAttrNumericElements getURDFAttrNumericAccess() {
		return pURDFAttrNumeric;
	}
	
	public ParserRule getURDFAttrNumericRule() {
		return getURDFAttrNumericAccess().getRule();
	}
	
	//URDFAttrSTRING:
	//	value=STRING;
	public URDFAttrSTRINGElements getURDFAttrSTRINGAccess() {
		return pURDFAttrSTRING;
	}
	
	public ParserRule getURDFAttrSTRINGRule() {
		return getURDFAttrSTRINGAccess().getRule();
	}
	
	//FLOAT ecore::EFloat:
	//	INT '.' INT
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//SCIENTIFIC ecore::EBigDecimal:
	//	FLOAT 'e' ('+' | '-')? INT
	public SCIENTIFICElements getSCIENTIFICAccess() {
		return pSCIENTIFIC;
	}
	
	public ParserRule getSCIENTIFICRule() {
		return getSCIENTIFICAccess().getRule();
	}
	
	//SIGNED_NUMERIC:
	//	'-'? (INT | FLOAT | SCIENTIFIC);
	public SIGNED_NUMERICElements getSIGNED_NUMERICAccess() {
		return pSIGNED_NUMERIC;
	}
	
	public ParserRule getSIGNED_NUMERICRule() {
		return getSIGNED_NUMERICAccess().getRule();
	}
	
	//NUMERIC:
	//	INT | FLOAT | SCIENTIFIC;
	public NUMERICElements getNUMERICAccess() {
		return pNUMERIC;
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
